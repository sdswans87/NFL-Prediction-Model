#################################################################################################################
#down efficiency function
#################################################################################################################
library(purrr)
down_efficiency <- function(df,dwn, pass_run, pos_def){
df2 <- df %>%
dplyr::group_by(game_id, !!sym(pos_def)) %>%
dplyr::filter(down == dwn & play_type == pass_run) %>%
dplyr::summarise(sum_epa_play_type = sum(epa),
total_success = sum(success),
n_play = n(),
epa_per_play = sum_epa_play_type / n_play,
succ_rate_play = total_success / n_play)
nm <- paste0(pass_run,'_', dwn)
df2 <- df2 %>% rename_all(~ paste(., nm, sep = "_"))
colnames(df2)[1:2] <- c('game_id', pos_def)
return(df2)
}
first_down_off_pass <- down_efficiency(nfl_close_game,1,'pass', 'posteam')
first_down_off_rush <- down_efficiency(nfl_close_game,1,'run', 'posteam')
first_down_def_pass <- down_efficiency(nfl_close_game,1,'pass', 'defteam')
first_down_def_rush <- down_efficiency(nfl_close_game,1,'run', 'defteam')
second_down_off_pass <- down_efficiency(nfl_close_game,2,'pass', 'posteam')
second_down_off_rush <- down_efficiency(nfl_close_game,2,'run', 'posteam')
second_down_def_pass <- down_efficiency(nfl_close_game,2,'pass', 'defteam')
second_down_def_rush <- down_efficiency(nfl_close_game,2, 'run', 'defteam')
third_down_off_pass <- down_efficiency(nfl_close_game,3,'pass','posteam')
third_down_off_rush <- down_efficiency(nfl_close_game,3,'run', 'posteam')
third_down_def_pass <- down_efficiency(nfl_close_game,3,'pass', 'defteam')
third_down_def_rush <- down_efficiency(nfl_close_game,3,'run', 'defteam')
list_df <- list(first_down_off_pass, first_down_off_rush, second_down_off_pass, second_down_off_rush)
all_down_eff <- list_df %>% reduce(inner_join, by = c('game_id','posteam'))
list_def_df <- list(first_down_def_pass, first_down_def_rush, second_down_def_pass, second_down_def_rush)
all_down_def <- list_def_df %>% reduce(inner_join, by = c('game_id', 'defteam'))
#################################################################################################################
#combine all efficiency data
#################################################################################################################
combine_eff_data <- function(df,df2, pos_def){
out <- left_join(df, df2, by = c('game_id', pos_def))
out <- out %>%
dplyr::mutate(pass_rate = n_pass/n_plays,
run_rate = 1-pass_rate,
pass_rate_first = (n_play_pass_1 / (n_play_pass_1 + n_play_run_1)),
pass_rate_second = (n_play_pass_2 / (n_play_pass_2 + n_play_run_2)))
return(out)
}
total_offensive_efficiency <- combine_eff_data(offensive_efficiency, all_down_eff, 'posteam')
total_defensive_efficiency <- combine_eff_data(defensive_efficiency, all_down_def, 'defteam')
#################################################################################################################
#model 2022 offense
#################################################################################################################
nfl_2022 <- load_pbp(2022:2023) %>%
progressr::with_progress()
#2022 data prep to make final 2022 offense numbers
nfl_close_2022 <- data_prep(nfl_2022)
nfl_close_2022$week <- ifelse(nfl_close_2022$season == 2023 & nfl_close_2022$week == 1, 19, nfl_close_2022$week)
nfl_close_2022$week <- ifelse(nfl_close_2022$season == 2023 & nfl_close_2022$week == 2, 20, nfl_close_2022$week)
nfl_close_2022 <- nfl_close_2022 %>% dplyr::filter(week != 1)
nfl_close_2022 <- nfl_close_2022 %>% dplyr::filter(week != 2)
nfl_close_2022$week <- nfl_close_2022$week - 2
nfl_close_2022$season <- 2023
qb_epa_2022 <- qb_epa_calc(nfl_close_2022, 'posteam')
qb_plays_2022 <- qb_plays_calc(nfl_close_2022, qb_epa_2022, 'posteam')
qb_epa_season_2022 <- qb_epa_year(nfl_close_2022, 'posteam')
qb_plays_season_2022 <- qb_plays_season_calc(nfl_close_2022, qb_epa_season_2022, 'posteam')
###############################################################################################
off_efficiency_game_2022 <- off_efficiency_game_calc(nfl_close_2022, 'posteam')
def_efficiency_game_2022 <- off_efficiency_game_calc(nfl_close_2022, 'defteam')
pass_epa_game_2022 <- pass_epa_game_calc(nfl_close_2022, 'posteam')
pass_epa_game_allowed_2022 <- pass_epa_game_calc(nfl_close_2022, 'defteam')
run_epa_game_2022 <- run_epa_game_calc(nfl_close_2022, 'posteam')
run_epa_game_allowed_2022 <- run_epa_game_calc(nfl_close_2022, 'defteam')
off_epa_game_2022 <- off_epa_game_calc(pass_epa_game_2022, run_epa_game_2022, 'posteam')
def_epa_game_2022 <- off_epa_game_calc(pass_epa_game_allowed_2022, run_epa_game_allowed_2022, 'defteam')
points_gm_2022 <- points_gm_calc(nfl_close_2022, 'posteam')
points_gm_all_2022 <- points_gm_calc(nfl_close_2022, 'defteam')
off_epa_game_2022 <- correct_team_names(off_epa_game_2022)
def_epa_game_2022 <- correct_team_names(def_epa_game_2022)
off_epa_game_2022 <- join_pts(off_epa_game_2022, points_gm_2022, 'posteam')
def_epa_game_2022 <- join_pts(def_epa_game_2022, points_gm_all_2022, 'defteam')
offensive_efficiency_2022 <- cpoe_calc(nfl_close_2022, off_epa_game_2022, 'posteam')
defensive_efficiency_2022 <- cpoe_calc(nfl_close_2022, def_epa_game_2022, 'defteam')
first_down_off_pass_2022 <- down_efficiency(nfl_close_2022,1,'pass', 'posteam')
first_down_def_pass_2022 <- down_efficiency(nfl_close_2022,1, 'pass', 'defteam')
first_down_off_rush_2022 <- down_efficiency(nfl_close_2022,1,'run', 'posteam')
first_down_def_rush_2022 <- down_efficiency(nfl_close_2022,1, 'run', 'defteam')
second_down_off_pass_2022 <- down_efficiency(nfl_close_2022,2,'pass', 'posteam')
second_down_def_pass_2022 <- down_efficiency(nfl_close_2022,2, 'pass', 'defteam')
second_down_off_rush_2022 <- down_efficiency(nfl_close_2022,2,'run', 'posteam')
second_down_def_rush_2022 <- down_efficiency(nfl_close_2022,2,'run', 'defteam')
list_df_2022 <- list(first_down_off_pass_2022, first_down_off_rush_2022,
second_down_off_pass_2022, second_down_off_rush_2022)
list_def_2022 <- list(first_down_def_pass_2022, first_down_def_rush_2022,
second_down_def_pass_2022, second_down_def_rush_2022)
all_down_eff_2022 <- list_df_2022 %>% reduce(inner_join, by = c('game_id','posteam'))
all_down_def_2022 <- list_def_2022 %>% reduce(inner_join, by = c('game_id','defteam'))
total_offensive_efficiency_2022 <- combine_eff_data(offensive_efficiency_2022, all_down_eff_2022, 'posteam')
total_defensive_efficiency_2022 <- combine_eff_data(defensive_efficiency_2022, all_down_def_2022, 'defteam')
#################################################################################################################
#ensemble model on off eff on actual points scored
#################################################################################################################
prep_df <- function(df, cols){
df <- df %>% ungroup() %>%
select(-all_of(cols))
smp_size <- floor(0.80 * nrow(df))
set.seed(5)
train_test <- sample(seq_len(nrow(df)), size = smp_size)
df_train <- df[train_test, ]
df_test <- df[-train_test, ]
return(list(df_train, df_test, df))
}
ensemble_off <- prep_df(total_offensive_efficiency, c(1:7,12,15:23))
ensemble_def <- prep_df(total_defensive_efficiency, c(1:7,12,15:23))
library(h2o)
h2o.init()
ensemble_off_train_h2o <- as.h2o(ensemble_off[[1]])
ensemble_off_test_h2o <- as.h2o(ensemble_off[[2]])
ensemble_def_train_h2o <- as.h2o(ensemble_def[[1]])
ensemble_def_test_h2o <- as.h2o(ensemble_def[[2]])
#train GBM
gbm_model <- function(df, y, x, nfolds, seed){
out <- h2o.gbm(x = x,
y = y,
training_frame = df,
nfolds = nfolds,
keep_cross_validation_predictions = TRUE,
seed = 5)
return(out)
}
off_gbm <- gbm_model(ensemble_off_train_h2o,'poss_score',
setdiff(names(ensemble_off_train_h2o), 'poss_score'), 5, 5)
def_gbm <- gbm_model(ensemble_def_train_h2o, 'score_allowed',
setdiff(names(ensemble_def_train_h2o), 'score_allowed'), 5, 5)
#train RF
RF_model <- function(df, y, x, nfolds, seed){
out <- h2o.randomForest(x = x,
y = y,
training_frame = df,
nfolds = nfolds,
keep_cross_validation_predictions = TRUE,
seed = 5)
return(out)
}
off_RF <- gbm_model(ensemble_off_train_h2o, 'poss_score',
setdiff(names(ensemble_off_train_h2o), 'poss_score'), 5, 5)
def_RF <- gbm_model(ensemble_def_train_h2o, 'score_allowed',
setdiff(names(ensemble_def_train_h2o), 'score_allowed'), 5, 5)
#train glm
lr_model <- function(df, y, x, nfolds, seed){
out <- h2o.glm(x = x,
y = y,
training_frame = df,
nfolds = nfolds,
keep_cross_validation_predictions = TRUE,
seed = 5)
return(out)
}
off_lr <- lr_model(ensemble_off_train_h2o, 'poss_score',
setdiff(names(ensemble_off_train_h2o), 'poss_score'), 5, 5)
def_lr <- lr_model(ensemble_def_train_h2o, 'score_allowed',
setdiff(names(ensemble_def_train_h2o), 'score_allowed'), 5, 5)
#train neural net
nn_model <- function(df, y, x, nfolds, seed){
out <- h2o.deeplearning(
x = x,
y = y,
training_frame = df,
nfolds = nfolds,
keep_cross_validation_predictions = TRUE,
seed = 5
)
return(out)
}
off_nn <- nn_model(ensemble_off_train_h2o, 'poss_score',
setdiff(names(ensemble_off_train_h2o), 'poss_score'), 5, 5)
def_nn <- nn_model(ensemble_def_train_h2o, 'score_allowed',
setdiff(names(ensemble_def_train_h2o), 'score_allowed'), 5, 5)
# Train a stacked random forest ensemble using the GBM, RF and LR above
ensemble_model <- function(mod, mod2, mod3, mod4, df, y, x){
out <- h2o.stackedEnsemble(x = x, y = y,
metalearner_algorithm = 'glm',
training_frame = df,
base_models = list(mod, mod2, mod3, mod4))
return(out)
}
off_ensemble_test <- ensemble_model(off_lr, off_RF, off_nn, off_gbm, ensemble_off_train_h2o,
'poss_score', setdiff(names(ensemble_off_train_h2o), 'poss_score'))
def_ensemble_test <- ensemble_model(def_lr, def_RF, def_nn, def_gbm, ensemble_def_train_h2o,
'score_allowed', setdiff(names(ensemble_def_train_h2o),'score_allowed'))
#check performance
mod_performance <- function(model, test_df){
out <- h2o.performance(model, test_df)
return(out)
}
off_gbm_test <- mod_performance(off_gbm, ensemble_off_test_h2o)
def_gbm_test <- mod_performance(def_gbm, ensemble_def_test_h2o)
off_rf_test <- mod_performance(off_RF, ensemble_off_test_h2o)
def_rf_test <- mod_performance(def_RF, ensemble_def_test_h2o)
off_glm_test <- mod_performance(off_lr, ensemble_off_test_h2o)
def_glm_test <- mod_performance(def_lr, ensemble_def_test_h2o)
off_nn_test <- mod_performance(off_nn, ensemble_off_test_h2o)
def_nn_test <- mod_performance(def_nn, ensemble_def_test_h2o)
min(h2o.rmse(off_gbm_test), h2o.rmse(off_rf_test), h2o.rmse(off_glm_test), h2o.rmse(off_nn))
min(h2o.rmse(def_gbm_test), h2o.rmse(def_rf_test), h2o.rmse(def_glm_test), h2o.rmse(def_nn))
off_ensemble_test <- mod_performance(off_ensemble_test, ensemble_off_train_h2o)
def_ensemble_test <- mod_performance(def_ensemble_test, ensemble_def_train_h2o)
h2o.rmse(off_ensemble_test)
h2o.rmse(def_ensemble_test)
################################################################################################################
#error pretty big off of actual points. Issue probably is that points get scored in 7s and 3s. Probably shouln't
#give 3 pts for every field goal. Let's create effective points, where we credit both offenses for moving the ball
#downfield to a certain expected points and to the defenses for how much field position they gave up. Will adjust
#to effective points, then recalc all models. From there we can make through place kicking adjustment to give a full
#view of offense. Calc what points the offense has 'earned' moving into field goal position and then see if the FG
#kicking unit adds points (i.e. makes FGs above expectation) or subtracts points from effective points.
#################################################################################################################
#build models off of effective points
#################################################################################################################
ensemble_eff <- prep_df(total_offensive_efficiency, c(1:7,12,15:20,22:24))
ensemble_def_eff <- prep_df(total_offensive_efficiency, c(1:7,12,15:20,22:24))
ensemble_off_eff_h2o_train <- as.h2o(ensemble_eff[[1]])
ensemble_off_eff_h2o_test <- as.h2o(ensemble_eff[[2]])
ensemble_def_eff_h2o_train <- as.h2o(ensemble_def_eff[[1]])
ensemble_def_eff_h2o_test <- as.h2o(ensemble_def_eff[[2]])
#train GBM
off_eff_gbm <- gbm_model(ensemble_off_eff_h2o_train, 'total_effective_pts',
setdiff(names(ensemble_off_eff_h2o_train), 'total_effective_pts'), 5, 5)
def_eff_gbm <- gbm_model(ensemble_def_eff_h2o_train, 'total_effective_pts',
setdiff(names(ensemble_def_eff_h2o_train), 'total_effective_pts'), 5, 5)
#train RF
off_eff_rf <- RF_model(ensemble_off_eff_h2o_train, 'total_effective_pts',
setdiff(names(ensemble_off_eff_h2o_train),'total_effective_pts'),5,5)
def_eff_rf <- RF_model(ensemble_def_eff_h2o_train, 'total_effective_pts',
setdiff(names(ensemble_def_eff_h2o_train),'total_effective_pts'),5,5)
#train glm
off_eff_lr <- lr_model(ensemble_off_eff_h2o_train, 'total_effective_pts',
setdiff(names(ensemble_off_eff_h2o_train),'total_effective_pts'),5,5)
def_eff_lr <- lr_model(ensemble_def_eff_h2o_train, 'total_effective_pts',
setdiff(names(ensemble_def_eff_h2o_train),'total_effective_pts'),5,5)
#train neural net
off_eff_nn <- nn_model(ensemble_off_eff_h2o_train, 'total_effective_pts',
setdiff(names(ensemble_off_eff_h2o_train),'total_effective_pts'),5,5)
def_eff_nn <- nn_model(ensemble_def_eff_h2o_train, 'total_effective_pts',
setdiff(names(ensemble_def_eff_h2o_train),'total_effective_pts'),5,5)
# Train a stacked random forest ensemble using the GBM, RF and LR above
off_eff_ensemble <- ensemble_model(off_eff_lr, off_eff_rf, off_eff_nn,
off_eff_gbm, ensemble_off_eff_h2o_train, 'total_effective_pts',
setdiff(names(ensemble_off_eff_h2o_train),'total_effective_pts'))
def_eff_ensemble <- ensemble_model(def_eff_lr, def_eff_rf, def_eff_nn,
def_eff_gbm, ensemble_def_eff_h2o_train, 'total_effective_pts',
setdiff(names(ensemble_def_eff_h2o_train), 'total_effective_pts'))
#check performance
off_gbm_eff_test <- mod_performance(off_eff_gbm, ensemble_off_eff_h2o_test)
def_gbm_eff_test <- mod_performance(def_eff_gbm, ensemble_def_eff_h2o_test)
off_rf_eff_test <- mod_performance(off_eff_rf, ensemble_off_eff_h2o_test)
def_rf_eff_test <- mod_performance(def_eff_rf, ensemble_def_eff_h2o_test)
off_glm_eff_test <- mod_performance(off_eff_lr, ensemble_off_eff_h2o_test)
def_glm_eff_test <- mod_performance(def_eff_lr, ensemble_def_eff_h2o_test)
off_nn_eff_test <- mod_performance(off_eff_nn, ensemble_off_eff_h2o_test)
def_nn_eff_test <- mod_performance(def_eff_nn, ensemble_def_eff_h2o_test)
min(h2o.rmse(off_gbm_eff_test), h2o.rmse(off_rf_eff_test), h2o.rmse(off_glm_eff_test), h2o.rmse(off_nn_eff_test))
min(h2o.rmse(def_gbm_eff_test), h2o.rmse(def_rf_eff_test), h2o.rmse(def_glm_eff_test), h2o.rmse(def_nn_eff_test))
off_ensemble_eff_test <- mod_performance(off_eff_ensemble, ensemble_off_eff_h2o_test)
def_ensemble_eff_test <- mod_performance(def_eff_ensemble, ensemble_def_eff_h2o_test)
h2o.rmse(off_ensemble_eff_test)
h2o.rmse(def_ensemble_eff_test)
###################################################################################################################
#run models on 2022 data
###################################################################################################################
library(caret)
final_off <- total_offensive_efficiency_2022 %>%
select(1,6,21)
final_def <- total_defensive_efficiency_2022 %>%
select(1,6,21)
ensemble_eff_2022 <- prep_df(total_offensive_efficiency_2022, c(1:7,12,15:20,21:24))
ensemble_def_2022 <- prep_df(total_defensive_efficiency_2022, c(1:7,12,15:20,21:24))
ensemble_off_2022 <- as.h2o(ensemble_eff_2022[[3]])
ensemble_def_2022 <- as.h2o(ensemble_def_2022[[3]])
#set target and predictors
preds_off_2022 <- h2o.predict(off_eff_ensemble, newdata = ensemble_off_2022)
preds_off_df <- as.data.frame(preds_off_2022)
preds_def_2022 <- h2o.predict(def_eff_ensemble, newdata = ensemble_def_2022)
preds_def_df <- as.data.frame(preds_def_2022)
final_off <- cbind(final_off, preds_off_df)
final_def <- cbind(final_def, preds_def_df)
colnames(final_off)[4] <- 'predicted_points'
colnames(final_def)[4] <- 'predicted_points_conceded'
caret::RMSE(final_off$total_effective_pts, final_off$predicted_points)
caret::RMSE(final_def$total_effective_pts, final_def$predicted_points_conceded)
#################################################################################################################
#correct for kicking efficiency
################################################################################################################
nfl_fg_eff <- function(df, pos_def){
df2 <- df %>% dplyr::filter(is.na(field_goal_result) == FALSE)
df2 <- df2 %>%
dplyr::mutate(exp_pts = fg_prob * 3)
df2$act_pts <- ifelse(df2$field_goal_result == 'made',3,0)
df2 <- df2 %>%
dplyr::mutate(added_pts = act_pts - exp_pts)
out <- df2 %>%
dplyr::group_by(season, !!sym(pos_def)) %>%
dplyr::summarise(total_added_pts = sum(added_pts),
total_kicks = n(),
kicks_per_game = total_kicks / 17,
avg_kick_exp_pts = mean(exp_pts),
avg_pts_per_kick = mean(act_pts),
add_pts_per_kick = total_added_pts / total_kicks,
add_pts_per_game = total_added_pts / 17
)
return(out)
}
nfl_fg_off_stats <- nfl_fg_eff(nfl_close_2022, 'posteam')
nfl_kickers_2022 <- nfl_close_2022 %>%
dplyr::filter(field_goal_attempt == 1) %>%
dplyr::select(c(posteam, kicker_player_name, kicker_player_id)) %>%
dplyr::filter(is.na(kicker_player_id) == FALSE) %>%
distinct()
#################################################################################################################
#adjust offense for place kicking
#################################################################################################################
final_off$kick_pts_add <- lookup(final_off$posteam, nfl_fg_off_stats$posteam, nfl_fg_off_stats$add_pts_per_game)
final_off <- final_off %>%
dplyr::mutate(adj_pts = total_effective_pts + kick_pts_add)
################################################################################################################
#schedule adjustment
################################################################################################################
library(tidyverse)
#break down epa by offense
epa_off <- nfl_close_2022 %>%
dplyr::filter(!is.na(epa), !is.na(posteam), play_type == 'pass'|play_type == 'run') %>%
dplyr::group_by(game_id, week, posteam) %>%
dplyr::summarise(off_epa = mean(epa),
off_plays = n()) %>%
dplyr::ungroup() %>%
dplyr::group_by(posteam) %>%
dplyr::arrange(week) %>%
dplyr::mutate(off_epa = pracma::movavg(off_epa, n = 14, type = 's'),
off_epa = dplyr::lag(off_epa),
off_plays = pracma::movavg(off_plays, n = 14, type = 's'),
off_plays = dplyr::lag(off_plays))
#break down epa by defense
epa_def <- nfl_close_2022 %>%
dplyr::filter(!is.na(epa), !is.na(posteam), play_type == 'pass'|play_type == 'run') %>%
dplyr::group_by(game_id, week, defteam, away_team) %>%
dplyr::summarise(def_epa = mean(epa),
def_plays = n()) %>%
dplyr::ungroup() %>%
dplyr::group_by(defteam) %>%
dplyr::arrange(week) %>%
dplyr::mutate(def_epa = pracma::movavg(def_epa, n = 14, type = 's'),
def_epa = dplyr::lag(def_epa),
def_plays = pracma::movavg(def_plays, n = 14, type = 's'))
#league average epa
epa_lg_avg <- nfl_close_2022 %>%
group_by(week) %>%
dplyr::summarise(league_mean = mean(epa, na.rm = TRUE)) %>%
dplyr::arrange(week) %>%
dplyr::mutate(league_mean = pracma::movavg(league_mean, n = 14, type = 's'),
league_mean = dplyr::lag(league_mean))
epa_off <- left_join(epa_off, epa_lg_avg, by = c('week')) %>%
dplyr::filter(week == 18) %>%
dplyr::mutate(adj_off_epa = off_epa - league_mean,
adj_off_pts = adj_off_epa * off_plays) %>%
select(c(posteam, adj_off_epa, adj_off_pts))
colnames(epa_off)[1] <- 'team'
epa_def <- left_join(epa_def, epa_lg_avg, by = c('week')) %>%
dplyr::filter(week == 18) %>%
dplyr::mutate(adj_def_epa = def_epa - league_mean,
adj_def_pts = adj_def_epa * def_plays) %>%
select(c(defteam, adj_def_epa, adj_def_pts))
colnames(epa_def)[1] <- 'team'
#################################################################################################################
#calculate average difficulty of schedule for each team
#################################################################################################################
adj_def <- final_def %>%
select(c(defteam, game_id)) %>%
separate(game_id,into = c('year','week','away','home'), sep = '_', remove = FALSE) %>%
mutate(opposition = ifelse(defteam == away,home,away)) %>%
select(-c(year, week, away, home))
adj_def$adjust <- lookup(adj_def$opposition, epa_def$team, epa_def$adj_def_pts)
colnames(adj_def)[1] <- 'team'
final_def_adj <- adj_def %>%
group_by(team) %>%
dplyr::summarise(def_vs_avg = mean(adjust))
adj_off <- final_off %>%
select(c(posteam, game_id)) %>%
separate(game_id,into = c('year','week','away','home'), sep = '_', remove = FALSE) %>%
mutate(opposition = ifelse(posteam == away,home,away)) %>%
select(-c(year, week, away, home))
adj_off$adjust <- lookup(adj_off$opposition, epa_off$team, epa_off$adj_off_pts)
colnames(adj_off)[1] <- 'team'
final_off_adj <- adj_off %>%
group_by(team) %>%
dplyr::summarise(off_vs_avg = mean(adjust))
#################################################################################################################
#group by teams
#################################################################################################################
final_off$week <- lookup(final_off$game_id, total_offensive_efficiency_2022$game_id,total_offensive_efficiency_2022$week)
weighted_offense <- final_off %>%
dplyr::group_by(posteam) %>%
dplyr::mutate(wt_avg_pts = pracma::movavg(predicted_points,n = 14, type = 'w')) %>%
dplyr::filter(week == 18) %>%
dplyr::select(c(posteam,wt_avg_pts))
weighted_offense$sched_adj <- lookup(weighted_offense$posteam, final_def_adj$team, final_def_adj$def_vs_avg)
weighted_offense <- weighted_offense %>%
dplyr::mutate(adj_off = wt_avg_pts - sched_adj)
final_def$week <- lookup(final_def$game_id, total_defensive_efficiency_2022$game_id,total_defensive_efficiency_2022$week)
weighted_defense <- final_def %>%
dplyr::group_by(defteam) %>%
dplyr::mutate(wt_avg_pts = pracma::movavg(predicted_points_conceded,n = 14, type = 'w')) %>%
dplyr::filter(week == 18) %>%
dplyr::select(c(defteam,wt_avg_pts))
weighted_defense$sched_adj <- lookup(weighted_defense$defteam, final_off_adj$team, final_off_adj$off_vs_avg)
weighted_defense <- weighted_defense %>%
dplyr::mutate(adj_def = wt_avg_pts - sched_adj)
#################################################################################################################
#adjust team QB performance from above vs defenses they played
#################################################################################################################
qb_update_2023$sched_adj <- lookup(qb_update_2023$team, weighted_offense$posteam, weighted_offense$sched_adj)
qb_update_2023 <- qb_update_2023 %>%
mutate(offense_update = as.numeric(wt_avg * (14/17)) - (as.numeric(wt_avg_team) - (sched_adj * 14/17)))
qb_no_change <- list('BUF', 'CHI', 'SF', 'NE', 'CIN', 'DAL', 'DET', 'JAX', 'KC', 'LAC', 'MIN', 'NYG', 'SEA', 'NYJ')
qb_update_2023$offense_update <- ifelse(qb_update_2023$team %in% qb_no_change,0,qb_update_2023$offense_update)
################################################################################################################
#team rankings
#################################################################################################################
power_rank <- weighted_offense %>% select(posteam)
colnames(power_rank) <- 'team'
power_rank$adj_off <- lookup(power_rank$team, weighted_offense$posteam, weighted_offense$adj_off)
power_rank$adj_def <- lookup(power_rank$team, weighted_defense$defteam, weighted_defense$adj_def)
power_rank <- power_rank %>%
mutate(pts_vs_avg = adj_off - adj_def)
power_rank$qb_adj <- lookup(power_rank$team, qb_update_2023$team, qb_update_2023$offense_update)
power_rank <- power_rank %>%
dplyr::mutate(final_ranking = pts_vs_avg + qb_adj)
write.csv(power_rank, 'power_rank.csv', row.names = FALSE)
#################################################################################################################
#home field advantage
#################################################################################################################
nfl_hfa <- fast_scraper_schedules(2002:2022)
nfl_hfa <- nfl_hfa %>% dplyr::filter(!season == 2020) %>%
dplyr::filter(game_type == 'REG') %>%
select(-c(away_moneyline, home_moneyline, away_spread_odds, home_spread_odds, old_game_id, gsis, nfl_detail_id,
pfr, pff, espn, over_odds, under_odds))
home_spread <- nfl_hfa %>%
group_by(season) %>%
summarise(home_line = mean(spread_line),
result_avg = mean(result))
line_spread <- ggplot(data = home_spread, aes(y = home_line, x = season)) + geom_point() + geom_smooth(method = lm)
line_spread
line_result <- ggplot(data = home_spread, aes(y = result_avg, x = season)) + geom_point() + geom_smooth(method = lm)
line_result
hfa_adj <- tail(home_spread$home_line, 1)
#################################################################################################################
#load 2023 schedules
#################################################################################################################
sched_2023 <- fast_scraper_schedules(2023)
week_odds <- function(df, wk, hfa){
df <- df %>% dplyr::filter(week == wk) %>%
select(c(game_id, gameday, weekday, home_team, away_team, away_rest, home_rest, spread_line, total_line))
df$home_ranking <- lookup(df$home_team, power_rank$team, power_rank$final_ranking)
df$away_ranking <- lookup(df$away_team, power_rank$team, power_rank$final_ranking)
df$starting_home_qb <- lookup(df$home_team, qb_update_2023$team, qb_update_2023$passer_player_name)
df$starting_away_qb <- lookup(df$away_team, qb_update_2023$team, qb_update_2023$passer_player_name)
df <- df %>%
dplyr::mutate(unregressed = (home_ranking - away_ranking + hfa),
regressed_number = 0.5 * unregressed + 0.5 * spread_line)
return(df)
}
week4_odds <- week_odds(sched_2023,4,hfa_adj)
write.csv(week4_odds, 'week4_odds.csv', row.names = FALSE)
View(week4_odds)
library(h2o)
library(caret)
library(dplyr)
library(ggplot2)
library(ggeasy)
library(h2o)
library(lookup)
library(nflverse)
library(pracma)
library(purrr)
library(tidyr)
library(tidyverse)
setwd("C:/Users/swan0/Desktop/sdswans/nfl-model/python/NFL-Prediction-Model")
setwd("C:/Users/swan0/Desktop/sdswans/nfl-model/python)
setwd("C:/Users/swan0/Desktop/sdswans/nfl-model/python")
library(ggplot2)
library(caret)
library(dplyr)
library(ggplot2)
library(ggeasy)
library(h2o)
library(lookup)
library(nflverse)
library(pracma)
library(purrr)
library(tidyr)
library(tidyverse)
setwd("C:/Users/swan0/Desktop/sdswans/nfl-model")
library(caret)
library(dplyr)
library(ggplot2)
library(ggeasy)
library(h2o)
library(lookup)
library(nflverse)
library(pracma)
library(purrr)
library(tidyr)
library(tidyverse)
setwd("C:/Users/swan0/Desktop/sdswans/python/NFL-Prediction-Model")
